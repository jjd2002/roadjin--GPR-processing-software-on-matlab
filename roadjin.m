
global VS
VS.v1d   = [];
VS.v2d   = [];
VS.zv2d  = []; 
VS.dzmig = [];
% Initialize structure of global environmental settings
global ENVAR
if exist('io/matgpr_preferences.mat','file') == 2,
    ENVAR = importdata('io/matgpr_preferences.mat');
else
    % Computer system and byte ordering
    [ENVAR.computer_system, maxsize, ENVAR.endian] = computer;
    ENVAR.endian = lower(ENVAR.endian);
    clear maxsize
    % Job priority in batch queue - no job defined
    ENVAR.QUEUE.sigpos.step = 0;
    ENVAR.QUEUE.trimtw.step = 0;
    ENVAR.QUEUE.rmbackgr.step = 0;
    ENVAR.QUEUE.rmdc.step = 0;
    ENVAR.QUEUE.dewow.step = 0;
    ENVAR.QUEUE.dzthgain.step = 0;
    ENVAR.QUEUE.stdagc.step = 0;
    ENVAR.QUEUE.gtagc.step = 0;
    ENVAR.QUEUE.invpdecay.step = 0;
    ENVAR.QUEUE.invadecay.step = 0;
    ENVAR.QUEUE.rstime.step = 0;
    ENVAR.QUEUE.rsscan.step = 0;
    ENVAR.QUEUE.equalize.step = 0;
    ENVAR.QUEUE.firff.step = 0;    
    % Default display settings
    ENVAR.DisplayOption = 'image';
    ENVAR.wigglescale   = 1;
    ENVAR.maxwigs       = 100;
    % Default option for designing frequency or wavenumber filters
    ENVAR.Design_Filter = 'TESTTR';
    % Default colour map
    ENVAR.colormap = 'jet';
    % Binary file save options
    ENVAR.matlabrelease = sscanf(version('-release'),'%d %f');
    ENVAR.binary_file_type = 'mgp';
    ENVAR.matfileformat = '-mat';
    % Number of UNDO levels
    ENVAR.undolevels = 4;
    % Default SEG-Y exportation format is IEEE floating point (Revision 1)
    ENVAR.SEGY_DataSampleFormat = 5;
end
% Initialize the current work directory to the default - always override
% the value imported from matgpr_preferences.mat
ENVAR.currentworkdir = [eval('pwd') '/work/']; 
% Set Version Number - always override the value imported from
% matgpr_preferences.mat 
ENVAR.CURRENT_VERSION = '1.0.0.1';
%%%
%%% Directory structure
p=path; lp=length(p); 
if strcmp(p(lp-3:lp),'matgpr')~=1, 
    path(path,eval('pwd'));
    path(path,[eval('pwd') '/toplevel']);
    path(path,[eval('pwd') '/toplevel/callbacks']);
    path(path,[eval('pwd') '/io']);
    path(path,[eval('pwd') '/io/3dview']);
    path(path,[eval('pwd') '/analysis']);
    path(path,[eval('pwd') '/analysis/fdtd']);
    path(path,[eval('pwd') '/doc']);
    path(path,[eval('pwd') '/work']);
    path(path,[eval('pwd') '/doc/www']);
%%%%
    path(path,[eval('pwd') '/work/newstuff']);
%%%%
end; 
clear p lp
%%%
% Initialize the Input and Output data structures
IPD = initdatastr;
OPD = initdatastr;
%%% Silently check for MATGPR updates
% checkforupdates(0)
%%%
%%% Initialize the driver window
screensize = get(0,'ScreenSize');
if screensize(4) <= 864,
    figure('Name',[ 'matGPR Revision ' ENVAR.CURRENT_VERSION ], ...
        'Menubar','none','NumberTitle','off', ... 
        'Tag','fi0', 'Position', [10 380 750 340]); 
else
    figure('Name',[ '道路桩基检测软件 ' ENVAR.CURRENT_VERSION ], ...
        'Menubar','none','NumberTitle','off', ...
        'Tag','fi0', 'Position', [150 550 750 350]); 
end
clear screensize;
% Initialize information service
% welcome; 

%%% =======================================================================
%%%  IMPORT / EXPORT AND MANAGE DATA (iomenu)
%%% =======================================================================
uimenu('Label',' 数据导入', 'Tag', 'iomenu');
%%%
%%% ------------ View header information ----------------------------------
uimenu(findobj('Tag','iomenu'), 'Tag', 'hdrs', ...
    'Label', '查看头文件信息');
% %%%
% %%% View DZT file headers
%     uimenu(findobj('Tag','hdrs'), ...
%         'Label', '查看 DZT (GSSI) 数据头文件', ...
%         'Callback', 'reviewDZTheader;');
% %%%
% %%% View DZT file headers
%     uimenu(findobj('Tag','hdrs'), ...
%         'Label', '查看 HCD 数据头文件', ...
%         'Callback', 'reviewHCDheader;');
%%%
%%% View RD3 header files
    uimenu(findobj('Tag','hdrs'), ...
        'Label', '查看 RAMAC (RD3) 数据头文件', ...
        'Callback', 'reviewRD3header;');
% %%% View PULSE EKKO header files
%     uimenu(findobj('Tag','hdrs'), ...
%         'Label', '查看 PULSE EKKO (DT1) 数据头文件', ...
%         'Callback', 'reviewDT1headerfile;');
% %%% View ZOND SEG-Y reel header
%     uimenu(findobj('Tag','hdrs'), ...
%         'Label', '查看 ZOND SEG-Y Reel Header', ...
%         'Callback', 'reviewZONDsegyreelheader;');
% %%% View SEG-Y reel header
%     uimenu(findobj('Tag','hdrs'), ...
%         'Label', '查看 SEG-Y 数据头文件', ...
%         'Callback', 'reviewSEGYreelheader;');
%%%
%%%
%%% ------------ Import raw data -----------------------------------------
uimenu(findobj('Tag','iomenu'), 'Tag', 'importdata', ...
    'Label','导入原始数据','Separator','On');
% %%% 
% %%% Import RADAN / DZT data (monostatic GSSI systems)
%     uimenu(findobj('Tag','importdata'), ...
%         'Label','DZT (GSSI) 格式','Callback', ... 
%         'IPD = do_importdata(''dzt_format''); ');
%%%
% %%% Import hcd data (monostatic hc systems)
%     uimenu(findobj('Tag','importdata'), ...
%         'Label','HCD 格式','Callback', ... 
%         'IPD = do_importdata(''hcd_format''); ');
%%%
%%% Import RAMAC data (monostatic Mala Geophysics systems) 
    uimenu(findobj('Tag','importdata'), ...
        'Label','RD3 (RAMAC) 格式','Callback',...
        'IPD = do_importdata(''rd3_format''); ');
% %%%
% %%% Import PULSE EKKO data (bistatic S&S systems) 
%     uimenu(findobj('Tag','importdata'), ...
%         'Label','DT1 (PULSE EKKO) 格式','Callback',...
%         'IPD = do_importdata(''dt1_format''); ');
% %%%
% %%% Import ZOND SEG-Y formatted data (Prism 2.5 version of SEG-Y) 
%     uimenu(findobj('Tag','importdata'), ...
%         'Label','ZOND SEG-Y 格式','Callback',...
%         'IPD = do_importdata(''zond_segy''); ');
% %%%
% %%% Import data in the Seismic Unix format
%     uimenu(findobj('Tag','importdata'), ...
%         'Label','SU (Seismic Unix) 格式','Callback',...
%         'IPD = do_importdata(''su_format''); ');
% %%%
% %%% Import data in SEGY format
%     uimenu(findobj('Tag','importdata'), ...
%         'Label','SEG-Y 格式','Callback',...
%         'IPD = do_importdata(''segy_format''); ');
%%% ----------------------------------------------------------------------
%%%
% %%% Load data previously saved in an MGP or MAT file 
% uimenu(findobj('Tag','iomenu'), ...
%     'tag', 'load_from_bin_file', ...
%     'Label', '导入 MGP 或 MAT 文件', ...
%     'Callback', ...
%     '[IPD, OPD] = do_loadIPDfromBINfile; ');
%%%
% %%% Concatenate sequential or segmented sections
% uimenu(findobj('Tag','iomenu'),'Label','Concatenate Sections', ...
%     'Separator', 'on', ...
%     'Callback', ...
%    ['concatenate(''initialize''); ' ... 
%     'waitfor(findobj(''Tag'', ''concat_gui'')); ' ...
%     'if ~isempty(IPD.d), ' ...
%     '    showinfo(IPD); ' ...
%     '    viewdata(IPD.x,IPD.tt2w,IPD.d,''indata'',IPD.xlab,IPD.zlab); '...
%     'else, ' ...
%     '    erh = errordlg(''Concatenation failed or aborted!'','...
%     '            ''MATGPR : ERROR''); ' ...
%     '    uiwait(erh);   clear erh; ' ...
%     '    return; ' ...
%     'end; ' ]);

% %%% Hold processed data ---------------------------------------------------
% %%%     
% uimenu(findobj('Tag','iomenu'),'Label','保留处理过的数据',...
%     'Separator','on',  'Callback',  ...
%     '[IPD, OPD] = keepprocdata(IPD, OPD);');
% %%%
% %%% Discard processed data
% uimenu(findobj('Tag','iomenu'),'Label','放弃处理过的数据', ...
%     'Callback',  ...
%     'OPD = discardprocdata;');
% %%%
% %%% ------------ UNDO Previous actions ------------------------------------
% uimenu(findobj('Tag','iomenu'),'Label','撤销/恢复', ...
%     'Tag', 'undoxx', ...
%     'Separator', 'on', ...
%     'Enable', 'off', ...
%     'Callback', ...
%     'undoxx(''initialize''); ');
%%%
% %%% Clear Undo buffer (to reclaim memory if needed)
% uimenu(findobj('Tag','iomenu'),'Label','Clear Undo Buffer', ...
%     'Tag', 'undoundo', ...
%     'Enable', 'off', ...
%     'Callback',  ...
%    ['set(findobj(''tag'',''fi0''),''userdata'',[]); ' ...
%     'set(findobj(''tag'',''undoxx''),''Enable'',''off''); ' ...
%     'set(findobj(''tag'',''undoundo''),''Enable'',''off''); ']);
% %%%
% %%% Save current data to a  binary file
% uimenu(findobj('Tag','iomenu'), ...
%     'tag', 'save_to_bin_file', ...
%     'Label', ['保存到 MGP 或 MAT 文件中'], ...
%     'Separator','on',  'Callback',  ...
%     'do_saveIPDtoBINfile(IPD); ' );
% %%%
% %%% Save current depth migrated data to an MGP or MAT file
% uimenu(findobj('Tag','iomenu'),'Label','Save Depth Migrated Data', ...
%     'Callback', ...
%     'do_saveDMIGtoMATfile(OPD); ');
%%%
% %%% ------------ Export to SU or SEG-Y files ------------------------------
% uimenu(findobj('Tag','iomenu'), 'Tag','exportdata', 'Label','导出数据 ');
% %%%
% %%% Export to Seismic Unix format
%     uimenu(findobj('Tag','exportdata'), ...
%         'Label','SU (Seismic Unix) 格式', ...
%         'Callback', ...
%         'do_exportdata(IPD,''su_format'') ');
% %%%
% %%% Export to SEGY format
%     uimenu(findobj('Tag','exportdata'), 'Label','SEG-Y 格式', ...
%         'Callback', ...
%         'do_exportdata(IPD,''segy_format'') ');
% %%%
% %%% Export to DZT format
%     uimenu(findobj('Tag','exportdata'), 'Label','DZT 格式', ...
%         'Callback', ...
%         'do_exportdata(IPD,''dzt_format'') ');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ------------ Runtime parameters ---------------------------------------
%%% 
uimenu(findobj('Tag','iomenu'), 'Tag','settingsmenu', ...
    'Label','设置','Separator','on');
% %%% Set binary file format for I/O
%     uimenu(findobj('Tag','settingsmenu'), 'Tag', 'binfilemenu', ...
%         'Label','Output Binary File','Separator','on');
%         uimenu(findobj('Tag','binfilemenu'), 'tag', 'select_mgp', ...
%             'Label','MGP file', ...
%             'Callback', ...
%            ['ENVAR.binary_file_type = ''mgp''; '...
%             'set(findobj(''tag'',''select_mgp''),''checked'',''on''); '...
%             'set(findobj(''tag'',''select_mat''),''checked'',''off''); '...
%             'set(findobj(''tag'',''matformat''),''enable'',''off''); ']);
%         uimenu(findobj('Tag','binfilemenu'), 'tag', 'select_mat', ...
%             'Label','MAT file', ...
%             'Callback', ...
%            ['ENVAR.binary_file_type = ''mat''; '...
%             'set(findobj(''tag'',''select_mgp''),''checked'',''off''); '...
%             'set(findobj(''tag'',''select_mat''),''checked'',''on''); '...
%             'set(findobj(''tag'',''matformat''),''enable'',''on''); ']);
%         if strcmp(ENVAR.binary_file_type,'mgp'),
%             set(findobj('tag','select_mgp'),'checked','on'); 
%         end
%         if strcmp(ENVAR.binary_file_type,'mat'),
%             set(findobj('tag','select_mat'),'checked','on'); 
%         end
%%% Change MAT file format
% if ENVAR.matlabrelease >= 14,
%     uimenu(findobj('Tag','settingsmenu'), 'Tag','matformat', ...
%         'Label','MAT-file Save Format', ...
%         'enable', 'off');
%             uimenu(findobj('Tag','matformat'), 'tag', 'matfile_v7.3', ...
%                 'Label','v7.3 (Default)', ...
%                 'Callback', ... 
%                ['ENVAR.matfileformat = ''-mat''; ' ... 
%                 'set(findobj(''tag'',''matfile_v7.3''),''checked'',''on''); '...
%                 'set(findobj(''tag'',''matfile_v6''),''checked'',''off''); ']);
%             uimenu(findobj('Tag','matformat'), 'tag', 'matfile_v6', ...
%                 'Label','v6',...
%                 'Callback', ...
%                ['ENVAR.matfileformat = ''-v6''; ' ... 
%                 'set(findobj(''tag'',''matfile_v7.3''),''checked'',''off''); '...
%                 'set(findobj(''tag'',''matfile_v6''),''checked'',''on''); ']);
%             if strcmp(ENVAR.matfileformat,'-mat'),
%                 set(findobj('tag','matfile_v7.3'),'checked','on');
%             end
%             if strcmp(ENVAR.matfileformat,'-v6'),
%                 set(findobj('tag','matfile_v6'),'checked','on');
%             end
% end
% %%% Decide number of undo levels                
%     uimenu(findobj('Tag','settingsmenu'), 'Tag', 'undolevels', ...
%         'Label','Number of Undo Levels','Separator','on', ...
%         'Callback', ...
%        ['answer = inputdlg(''Please Give Number of Undo levels'', ' ...
%         '''UNDO OPTONS'', 1, {num2str(ENVAR.undolevels)} ); '...
%         'if isempty(answer), ' ...
%         '   return; ' ...
%         'end; ' ...
%         'ENVAR.undolevels = round(str2num(answer{1})); ' ...
%         'clear answer; ' ]);
% %%% Byte ordering options for I/O                
%     uimenu(findobj('Tag','settingsmenu'), 'Tag', 'bytemenu', ...
%         'Label','Byte Ordering','Separator','on');
%         uimenu(findobj('Tag','bytemenu'), 'tag', 'little_endian', ...
%             'Label','Set Little Endian','Callback', ...
%            ['ENVAR.endian=''l''; ' ...
%             'set(findobj(''tag'',''little_endian''),''checked'',''on''); '...
%             'set(findobj(''tag'',''big_endian''),''checked'',''off''); ']);
%         uimenu(findobj('Tag','bytemenu'), 'tag', 'big_endian', ...
%             'Label','Set Big Endian','Callback', ...
%            ['ENVAR.endian=''b''; ' ...
%             'set(findobj(''tag'',''little_endian''),''checked'',''off''); '...
%             'set(findobj(''tag'',''big_endian''),''checked'',''on''); ']);
%         if strcmp(ENVAR.endian,'l'),
%             set(findobj('tag','little_endian'),'checked','on'); 
%         end
%         if strcmp(ENVAR.endian,'b'),
%             set(findobj('tag','big_endian'),'checked','on'); 
%         end
% %%% SEG-Y exportation options 
%     uimenu(findobj('Tag','settingsmenu'), 'Tag', 'segymenu', ...
%         'Label','SEG-Y Data Sample Format','Separator','on');
%         uimenu(findobj('Tag','segymenu'), 'tag', '4byteIBMfp', ...
%             'Label','4-byte IBM Floating Point', ...
%             'Callback', ... 
%            ['ENVAR.SEGY_DataSampleFormat = 1; ' ...
%             'set(findobj(''tag'',''4byteIBMfp''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''4bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''2bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4byteIEEEfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''1byte2c''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','segymenu'), 'tag', '4bytei2c', ...
%             'Label','4-byte Integer, two''s complement',...
%             'Callback', ...
%            ['ENVAR.SEGY_DataSampleFormat = 2; ' ...
%             'set(findobj(''tag'',''4byteIBMfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4bytei2c''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''2bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4byteIEEEfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''1byte2c''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','segymenu'), 'tag', '2bytei2c',...
%             'Label','2-byte Integer, two''s complement',...
%             'Callback', ...
%            ['ENVAR.SEGY_DataSampleFormat = 3; ' ...
%             'set(findobj(''tag'',''4byteIBMfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''2bytei2c''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''4byteIEEEfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''1byte2c''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','segymenu'), 'tag', '4byteIEEEfp', ...
%             'Label','4-byte IEEE Floating Point (Default)',...
%             'Callback', ...
%            ['ENVAR.SEGY_DataSampleFormat = 5; ' ...
%             'set(findobj(''tag'',''4byteIBMfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''2bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4byteIEEEfp''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''1byte2c''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','segymenu'), 'tag', '1byte2c', ...
%             'Label','1-byte Integer, two''s complement',...
%             'Callback', ... 
%            ['ENVAR.SEGY_DataSampleFormat = 8; ' ...
%             'set(findobj(''tag'',''4byteIBMfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''2bytei2c''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''4byteIEEEfp''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''1byte2c''),''checked'',''on''); ' ]);
%             if ENVAR.SEGY_DataSampleFormat == 1,
%                 set(findobj('tag','4byteIBMfp'),'checked','on'); 
%             end
%             if ENVAR.SEGY_DataSampleFormat == 2,
%                 set(findobj('tag','4bytei2c'),'checked','on'); 
%             end
%             if ENVAR.SEGY_DataSampleFormat == 3,
%                 set(findobj('tag','2bytei2c'),'checked','on'); 
%             end
%             if ENVAR.SEGY_DataSampleFormat == 5,
%                 set(findobj('tag','4byteIEEEfp'),'checked','on'); 
%             end
%             if ENVAR.SEGY_DataSampleFormat == 8,
%                 set(findobj('tag','1byte2c'),'checked','on'); 
%             end
% %%% Data display options
%     uimenu(findobj('Tag','settingsmenu'), 'Tag','plotoption', ...
%         'Label','Display Mode', 'Separator', 'on');
%         uimenu(findobj('Tag','plotoption'), 'tag','imagedisplay', ...
%             'Label','Image Display',...
%             'Callback', ...
%            ['ENVAR.DisplayOption = ''image''; ' ...
%             'set(findobj(''tag'',''imagedisplay''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''wiggledisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''varareadisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wig&imgdisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''var&imgdisplay''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','plotoption'),  'tag','wiggledisplay', ...
%             'Label','Wiggle Display',...
%             'Callback', ...
%            ['ENVAR.DisplayOption = ''wiggle'';' ...
%             'set(findobj(''tag'',''imagedisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wiggledisplay''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''varareadisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wig&imgdisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''var&imgdisplay''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','plotoption'), 'tag', 'varareadisplay', ...
%             'Label','Variable Area Display',...
%             'Callback', ... 
%            ['ENVAR.DisplayOption = ''vararea''; ' ...
%             'set(findobj(''tag'',''imagedisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wiggledisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''varareadisplay''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''wig&imgdisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''var&imgdisplay''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','plotoption'), 'tag', 'wig&imgdisplay', ...
%             'Label','Wiggle + Image',...
%             'Callback', ...
%            ['ENVAR.DisplayOption = ''wig&img''; ' ...
%             'set(findobj(''tag'',''imagedisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wiggledisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''varareadisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wig&imgdisplay''),''checked'',''on''); ' ...
%             'set(findobj(''tag'',''var&imgdisplay''),''checked'',''off''); ' ]);
%         uimenu(findobj('Tag','plotoption'), 'tag', 'var&imgdisplay', ...
%             'Label','Var.Area + Image',...
%             'Callback', ...
%            ['ENVAR.DisplayOption = ''var&img''; ' ... 
%             'set(findobj(''tag'',''imagedisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wiggledisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''varareadisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''wig&imgdisplay''),''checked'',''off''); ' ...
%             'set(findobj(''tag'',''var&imgdisplay''),''checked'',''on''); ' ]);
%             if strcmp(ENVAR.DisplayOption,'image'),
%                 set(findobj('tag','imagedisplay'),'checked','on'); 
%             end
%             if strcmp(ENVAR.DisplayOption,'wiggle'),
%                 set(findobj('tag','wiggledisplay'),'checked','on'); 
%             end
%             if strcmp(ENVAR.DisplayOption,'vararea'),
%                 set(findobj('tag','varareadisplay'),'checked','on'); 
%             end
%             if strcmp(ENVAR.DisplayOption,'wig&img'),
%                 set(findobj('tag','wig&imgdisplay'),'checked','on'); 
%             end
%             if strcmp(ENVAR.DisplayOption,'var&img'),
%                 set(findobj('tag','var&imgdisplay'),'checked','on'); 
%             end
%%% Choose how to design filters
    uimenu(findobj('Tag','settingsmenu'), 'Tag', 'filterdesign', ...
        'Label','设计 F K 滤波器','Separator','on');
            uimenu(findobj('Tag','filterdesign'), 'tag', 'use_test_trace', ...
                'Label','在一条测试测线上', ...
                'Callback', ...
               ['ENVAR.Design_Filter = ''TESTTR''; ' ...
                'set(findobj(''tag'',''use_test_trace''),''checked'',''on''); '...
                'set(findobj(''tag'',''use_mean_trace''),''checked'',''off''); '...
                'set(findobj(''tag'',''type_cutoff''),''checked'',''off''); ']);
            % uimenu(findobj('Tag','filterdesign'), 'tag', 'use_mean_trace', ...
            %     'Label','On the mean trace or scanline', ...
            %     'Callback', ...
            %    ['ENVAR.Design_Filter = ''MEANTR''; ' ...
            %     'set(findobj(''tag'',''use_test_trace''),''checked'',''off''); '...
            %     'set(findobj(''tag'',''use_mean_trace''),''checked'',''on''); '...
            %     'set(findobj(''tag'',''type_cutoff''),''checked'',''off''); ']);
            uimenu(findobj('Tag','filterdesign'), 'tag', 'type_cutoff', ...
                'Label','输入截止频率',...
                'Callback', ...
               ['ENVAR.Design_Filter = ''TYPEIN''; ' ...
                'set(findobj(''tag'',''use_test_trace''),''checked'',''off''); '...
                'set(findobj(''tag'',''use_mean_trace''),''checked'',''off''); '...
                'set(findobj(''tag'',''type_cutoff''),''checked'',''on''); ']);
            if strcmp(ENVAR.Design_Filter,'TESTTR'),
                set(findobj('tag','use_test_trace'),'checked','on'); 
            end
            if strcmp(ENVAR.Design_Filter,'MEANTR'),
                set(findobj('tag','use_mean_trace'),'checked','on'); 
            end
            if strcmp(ENVAR.Design_Filter,'TYPEIN'),
                set(findobj('tag','type_cutoff'),'checked','on'); 
            end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %%%
% %%% Terminate program saving the current settings -------------------------
% uimenu(findobj('Tag','iomenu'),'Label','退出软件','Separator','on',...
%     'Callback',...
%    ['save(''io/matgpr_preferences.mat'',''ENVAR'',ENVAR.matfileformat); ' ...
%     'c0=get(0,''children''); ' ... 
%     'delete(c0); ' ...
%     'clear all; ']);

% =========================================================================
% DISPLAY AND INSPECTION UTILITIES
% =========================================================================
uimenu('Label',' 查看数据 ', 'Tag', 'plotmenu');
%%%
%%% ------------ Display Input and Output Data ----------------------------
%%% Display input data
uimenu(findobj('Tag','plotmenu'), 'Label','查看图像','Callback', ...
   ' viewdata(IPD.x,IPD.tt2w,IPD.d,''indata'',IPD.xlab,IPD.zlab); ');
%%%
%%% Display processed (output) data                   
uimenu(findobj('Tag','plotmenu'),'Label','查看处理过的图像', ...
    'Callback', ...
   ['if ~isempty(OPD.d); ' ...
    '    viewdata(OPD.x,OPD.tt2w,OPD.d,''outdata'',OPD.xlab,OPD.zlab); ' ...
    'else; ' ...
    '   erh = errordlg(''图像数据尚未处理'', '...
    '           ''MATGPR: ERROR''); ' ...
    '   uiwait(erh);  clear erh; ' ...
    'end; ']);
%%%
% %%% Add markers to raw and processed data displays
% uimenu(findobj('Tag','plotmenu'),'Label','Show Marker Traces',...
%     'Separator','on','Callback', ...
%     ' markerdisplay(IPD.d,IPD.x,IPD.markertr); ');
%%%
%%% ------------ Inspect Input Data --------------------------------------
%%% Inspect input data traces
uimenu(findobj('Tag','plotmenu'),'Label','查看单道', ...
    'Separator','on','Callback',...
    'viewtraces(IPD.dt,IPD.dx,IPD.d,''indata''); ');
% %%% Inspect input trace spectra
% uimenu(findobj('Tag','plotmenu'),'Label','View Spectra', ...
%     'Callback',...
%     'viewspectra(IPD.dt,IPD.dx,IPD.d,''indata'')');         
%%%
%%% ------------ Inspect Output data --------------------------------------
%%% Inspect output data traces
uimenu(findobj('Tag','plotmenu'),'Label','查看处理过的单道',...
    'Separator','on', 'Callback', ...
    ['if ~isempty(OPD.d); ' ...
     '    viewtraces(OPD.dt,OPD.dx,OPD.d,''outdata''); ' ...          
     'else; ' ...
     '   erh = errordlg(''没有处理过的数据'', ' ...
     '           ''MATGPR: ERROR''); ' ...
     '   uiwait(erh);   clear erh; ' ...
     'end; ']);
% %%% Inspect output trace spectra
% uimenu(findobj('Tag','plotmenu'),'Label','View Processed Spectra',...
%     'Callback', ...         
%     ['if ~isempty(OPD.d); ' ...
%      '    viewspectra(OPD.dt,OPD.dx,OPD.d,''outdata''); ' ...
%      'else; ' ...
%      '   erh = errordlg(''No processed data to show'', ' ...
%      '           ''MATGPR : ERROR''); ' ...
%      '   uiwait(erh);   clear erh; ' ...
%      'end; ']);
%%%
% %%% ------------ Attenuation Characteristics ------------------------------
% uimenu(findobj('Tag','plotmenu'), 'Tag', 'attenuationchars', ...
%     'Label','Attenuation Characteristics', 'Separator', 'on');
% %%%
% %%% Attenuation characteristic of the IPD
% uimenu(findobj('Tag','attenuationchars'), ...
%     'Label', '... of Input Data', 'Callback', ...
%     'getattenuation(IPD.d, IPD.tt2w); ' );
% uimenu(findobj('Tag','attenuationchars'), ...
%     'Label', '... of Processed Data', 'Callback', ...
%     'getattenuation(OPD.d, OPD.tt2w); ' );
% %%%     
% %%% ------------ Instantaneous Attributes ---------------------------------
% uimenu(findobj('Tag','plotmenu'), 'Tag', 'instattributes', ...
%     'Label','Instantaneous Attributes', 'Separator', 'on');
% %%%
% %%% Instantaneous amplitude (envelope, attribute = 'amplitude')
%     uimenu(findobj('Tag','instattributes'), ...
%         'Label', 'Instantaneous Amplitude', 'Callback', ...
%         'OPD = do_instattributes(IPD, ''amplitude''); ' );
% %%% Instantaneous phase in first and second quadrants (attribute = 'atan')
%     uimenu(findobj('Tag','instattributes'), ...
%         'Label', 'Instantaneous Phase, [-90, 90]', 'Callback', ...
%         'OPD = do_instattributes(IPD, ''atan''); ');
% %%% Instantaneous phase (attribute = 'atan2')
%     uimenu(findobj('Tag','instattributes'), ...
%         'Label', 'Instantaneous Phase, [-180,180]', 'Callback', ...
%         'OPD = do_instattributes(IPD, ''atan2''); ' );
% %%% Unwraped instantaneous phase (attribute = 'unwraped')
%     uimenu(findobj('Tag','instattributes'), ...
%         'Label', 'Instantaneous Phase, Unwraped', 'Callback', ...
%         'OPD = do_instattributes(IPD, ''unwraped''); ' );
% %%% Unwraped instantaneous frequency (attribute = 'ifreq')
%     uimenu(findobj('Tag','instattributes'), ...
%         'Label', 'Instantaneous Frequency', 'Callback', ...
%         'OPD = do_instattributes(IPD, ''ifreq''); ' );


%%% =======================================================================
%%% BASIC HANDLING UTILITIES
%%% =======================================================================
uimenu('Label',' 简单处理', 'Tag', 'handlemenu');
%%%
% %%% SET UP AND RUN BATCH JOBS ---------------------------------------------
% %%%     
% uimenu(findobj('Tag','handlemenu'),'Label','创建一个流程',...
%     'Callback',  'Setup_batch_job(''initialize'');');
% uimenu(findobj('Tag','handlemenu'),'Label','运行流程',...
%     'Callback',  ...
%     'OPD = Run_batch_job(IPD);');
% %%%
%%% ------- TRACE EDITING UTILITIES ---------------------------------------
%%% Adjust GPR traces to true time-zero
uimenu(findobj('Tag','handlemenu'),'Label','调整信号位置',...
    'Separator','on', 'Callback', ...
    'OPD = do_sigposition(IPD); ' );
%%% Trim the rear end of the recorded time window
uimenu(findobj('Tag','handlemenu'),'Label','修剪时窗', ...
    'Callback', ...
    'OPD = do_trimtimewindow(IPD); ' );
%%% Edit the scan axis (handle groups of traces)
uimenu(findobj('Tag','handlemenu'),'Label','编辑扫描轴','Callback', ...
    'OPD = do_editscanaxis(IPD); ' );
% %%% Remove individual, or small clusters of bad traces
% uimenu(findobj('Tag','handlemenu'),'Label','去除坏道', ...
%     'Callback', 'OPD = do_removebadtraces(IPD); ' );
%%%
%%% Remove DC component
uimenu(findobj('Tag','handlemenu'),'Label','去除直流分量','Separator','on', ...
    'Callback', ...
    'OPD = do_removedc(IPD); ' );
% %%% Apply a dewow filter
% uimenu(findobj('Tag','handlemenu'),'Label','Dewow', ...
%     'Callback', ...
%     'OPD = do_dewow(IPD); ' );
% %%% Trace equalization
% uimenu(findobj('Tag','handlemenu'),'Label','Equalize Traces', ...
%     'Callback', ...
%     'OPD = do_equalize(IPD); ');
%%%
%%% ------- GAIN MANIPULATION ---------------------------------------------
% %%% Remove (header) gain from GSSI (DZT) data 
% uimenu(findobj('Tag','handlemenu'),'Label','Remove DZT Header Gain', ...
%     'Separator','on', 'Callback', ...
%     'OPD = do_removeDZThdrgain(IPD); ' );   
%%%
%%% Apply Standard AGC
uimenu(findobj('Tag','handlemenu'), 'Label','自动增益', ...
    'Callback', ...
    'OPD = do_gainagc(IPD); ' );
%%%
% %%% Apply Gaussian tapered AGC
% uimenu(findobj('Tag','handlemenu'), 'Label','高斯锥形 AGC 增益', ...
%     'Callback', ...
%     'OPD = do_gaingagc(IPD);' );
%%%
% %%% Apply Inverse Decay gain function
% uimenu(findobj('Tag','handlemenu'), 'Label','Inverse Amplitude Decay', ...
%     'Callback', ...
%     'OPD = do_gaininvdecay(IPD);' );
%%%
% %%% Apply exponential gain function (Inverse Power Decay)
% uimenu(findobj('Tag','handlemenu'),'Label','反向功率衰减',...
%     'Callback', ...
%     'OPD = do_gaintpow(IPD); ' );
%%%
%%% ------- RESAMPLING ----------------------------------------------------
% %%% Resample the time axis
% uimenu(findobj('Tag','handlemenu'),'Label','Resample Time Axis', ...
%     'Separator','On', 'Callback', ...
%     'OPD = do_timeresample(IPD);' );
% %%% Resample the scan axis
% uimenu(findobj('Tag','handlemenu'),'Label','Resample Scan Axis', ...
%     'Callback', ...
%     'OPD = do_scanaxisresample(IPD);');
%%%
%%% ------- Marker interpolation and topography assimilation --------------
%%%
% %%% Edit / Insert Marker Trace information
% uimenu(findobj('Tag','handlemenu'),'Tag','editmarkers', ...
%     'Label','Edit Markers','Separator','on')
% %%% Use the "edit mode" of editmarkers.m to enter the XYZ info
%     uimenu(findobj('Tag','editmarkers'), 'Label', 'Use Editor Mode',...
%         'Callback', ...
%        ['if ~isempty(findstr(IPD.origin,''Bistatic'')) || ' ...
%         '   ~isempty(findstr(IPD.origin,''PULSE EKKO'')); ' ...
%         '    erh = errordlg([''Function presently not available '' ' ...
%         '          ''for BISTATIC data''],''MATGPR: ERROR''); ' ...
%         '    uiwait(erh); clear erh; ' ...
%         '    return; ' ...
%         'end; ' ...
%         'IPD.markertr = ' ...
%         'editmarkers(IPD.markertr,IPD.pname,IPD.fname,''editmode''); ' ...
%         'showinfo(IPD); ' ]);
% %%% Use the "interactive mode" of editmarkers.m to enter the XYZ info
%     uimenu(findobj('Tag','editmarkers'), ...
%         'Label', 'Use Interactive Mode',  'Callback',...
%         ['if ~isempty(findstr(IPD.origin,''Bistatic'')) || ' ...
%          '   ~isempty(findstr(IPD.origin,''PULSE EKKO'')); ' ...
%          '    erh = errordlg([''Function presently not available '' ' ...
%          '          ''for BISTATIC data''],''MATGPR: ERROR''); ' ...
%          '    uiwait(erh); clear erh; ' ...
%          '    return; ' ...
%          'end; ' ...
%          'IPD.markertr = '...
%          'editmarkers(IPD.markertr,ENVAR.currentworkdir,IPD.fname,''runmode''); '...
%          'showinfo(IPD); ' ]);
%%% -----------------------------------------------------------------------
%%% Interpolate from unequally to equally spaced traces using the
% %%% information given for the marker traces
% uimenu(findobj('Tag','handlemenu'),...
%     'Label','Interpolate to equal spacing', 'Callback',... 
%     'OPD = do_markerinterp(IPD); ');
% %%% -----------------------------------------------------------------------
% %%% Generate coordinates using spatial information of Marker Traces
% uimenu(findobj('Tag','handlemenu'),'Label','Make X Y Z ',...
%     'Callback',... 
%    ['if ~isempty(findstr(IPD.origin,''Bistatic'')) || ' ...
%     '   ~isempty(findstr(IPD.origin,''PULSE EKKO'')); ' ...
%     '    erh = errordlg([''Function presently not available '' ' ...
%     '          ''for BISTATIC data''],''MATGPR: ERROR''); ' ...
%     '    uiwait(erh); clear erh; ' ...
%     '    return; ' ...
%     'end; ' ...
%     'IPD.xyz.Tx = interpxyz(IPD.dx,IPD.ntr,IPD.markertr); ' ...
%     'IPD.xyz.Rx = IPD.xyz.Tx; ' ...
%     'if ~isempty(IPD.xyz.Tx), ' ...
%     '    showinfo(IPD); ' ...
%     'end; '] );

             
%%% =======================================================================
%%% SMOOTHING AND FILTERING
%%% =======================================================================
uimenu('Label',' 滤波处理', 'Tag', 'filtsm');
%%%
%%% -------- SPATIAL FILTERS ----------------------------------------------
%%% 1-D or 2-D Mean Filter
uimenu(findobj('Tag','filtsm'),'Label','均值滤波', 'Callback', ...
    'OPD = do_mmfilter(IPD,''meanfilt''); ' );
%%% 1-D or 2-D Median Filter
uimenu(findobj('Tag','filtsm'),'Label','中值滤波','Callback',...
    'OPD = do_mmfilter(IPD,''medifilt''); ' );
%%% Remove mean trace (global background)
uimenu(findobj('Tag','filtsm'),'Label','去除背景', ...
    'Callback', ...
    'OPD = do_removebackgr(IPD); ');
% %%% Remove running window mean (background) trace: Horizontal reflector
% %%% suppression. 
% uimenu(findobj('Tag','filtsm'),'Label','抑制水平特征', ...
%     'Callback', ...
%     'OPD = do_rmswbackgr(IPD); ' );
% %%% Remove running window foreground trace - Dipping reflector suppression. 
% uimenu(findobj('Tag','filtsm'),'Label','抑制垂直特征', ...
%     'Callback', ...
%     'OPD = do_rmswforegr(IPD); ' );
% %%% Karhunen - Loeve filter 
% uimenu(findobj('Tag','filtsm'), 'Label','Karhunen - Loeve 滤波器', ...
%      'Callback', ...
%      'OPD = do_karhunenloeve(IPD); ' );
%%%
%%% -------- FREQUENCY FILTERS --------------------------------------------
uimenu(findobj('Tag','filtsm'), 'Tag','firffilt',...
    'Label','FIR 频率滤波器','Separator','on');
%%% Low pass
    uimenu(findobj('Tag','firffilt'),'Label','低通','Callback', ...
        'OPD = do_f_filter(IPD, 1);' );
%%% High pass
    uimenu(findobj('Tag','firffilt'),'Label','高通','Callback',...
        'OPD = do_f_filter(IPD, 2);' );
%%% Band Pass
    uimenu(findobj('Tag','firffilt'),'Label','带通','Callback',...
        'OPD = do_f_filter(IPD, 3);' );
%%% Band stop
    uimenu(findobj('Tag','firffilt'),'Label','带阻','Callback',...
        'OPD = do_f_filter(IPD, 4);' );
% %%% Notch
%     uimenu(findobj('Tag','firffilt'),'Label','NOTCH 滤波器', ...
%         'Callback', ...
%         ['OPD = discardprocdata; ' ...
%          'OPD = IPD; ' ...
%          'OPD.d = notch_filter(IPD.x, IPD.d, IPD.dt); ' ...
%          'if ~isempty(OPD.d), ' ...
%          '    viewdata(OPD.x,OPD.tt2w,OPD.d,''outdata'',OPD.xlab, ' ...
%          '             OPD.zlab); ' ...
%          '    iss = size(OPD.history,1); ' ...
%          '    OPD.history(iss+1,1)=cellstr(''Applied Notch Filter''); ' ...
%          '    clear iss; ' ...
%          'end; ' ]);
%%%
% %%% -------- WAVENUMBER FILTERS -------------------------------------------
% uimenu(findobj('Tag','filtsm'),'Tag','firkfilt', ...
%     'Label','FIR 波数滤波器');
% %%% High pass
%     uimenu(findobj('Tag','firkfilt'),'Label','低通','Callback', ...
%         'OPD = do_k_filter(IPD, 1);' );
% %%% Low pass
%     uimenu(findobj('Tag','firkfilt'),'Label','高通','Callback',...
%         'OPD = do_k_filter(IPD, 2);' );
% %%% Band pass
%     uimenu(findobj('Tag','firkfilt'),'Label','带通','Callback',...
%         'OPD = do_k_filter(IPD, 3);' );
% %%% Band stop
%     uimenu(findobj('Tag','firkfilt'),'Label','带阻','Callback',...
%         'OPD = do_k_filter(IPD, 4);' );
% %%%
% %%% -------- F - X DECONVOLUTION ------------------------------------------
% uimenu(findobj('Tag','filtsm'),'Label','F-X Deconvolution','Separator','on',...
%     'Callback', ...
%     'OPD = do_fx_decon(IPD); ');
%%%
% %%% -------- F - K Filter -------------------------------------------------
% uimenu(findobj('Tag','filtsm'),'Label','F-K 滤波器','Separator','on',...
%     'Callback', ...
%     'OPD = do_fk_filter(IPD); ');
%%%
% %%% -------- TAU -P Filter ------------------------------------------------
% uimenu(findobj('Tag','filtsm'),'Label','Tau-P 滤波器','Separator','on',...
%     'Callback', ...
%     'OPD = do_taup_filter(IPD); ');
%%%
% %%% -------- PREDICTIVE DECONVOLUTION -------------------------------------
% uimenu(findobj('Tag','filtsm'), 'Separator','on', ...
%     'Label','预测反卷积', 'Callback', ...
%     'OPD = do_predc(IPD); ' );
% %%%
% %%% -------- SPARSE SPIKE DECONVOLUTION -----------------------------------
% uimenu(findobj('Tag','filtsm'), 'Separator','on', ...
%     'Label','稀疏反卷积', 'Callback', ...
%     'OPD = do_sparse_decon(IPD); ' );

%%% =======================================================================
%%% Velocity Analysis and Imaging 
%%% =======================================================================
uimenu('Label','成果展示 ', 'Tag', 'imaging');
%%%
%%% -------- Velocity analysis / Fit a diffraction front hyperbola --------
uimenu(findobj('Tag','imaging'), 'Label', '速度拟合',...
    'Callback', ...
    'do_fithyperbola(IPD); ');
% %%%
% %%% -------- Static (Topographic) corrections -----------------------------
% uimenu(findobj('Tag','imaging'),'Label','Static Correction', ...
%     'Separator','on',  'Callback', ...
%     'OPD = do_statics(IPD); ');
%%%
%%% -------- MIGRATION IN UNIFORM OR LAYERED STRUCTURES -------------------
%%%
%%% Create or Import an 1-D velocity model
uimenu(findobj('Tag','imaging'),'Label','获取一维速度模型', ...
    'Separator','on',  'Callback', ...
   ['VS.v1d = get1dvelocity; ' ...
    'showinfo(IPD); ' ]); 
% %%%
% %%% 1-D STOLT F-K Time Migration          
% uimenu(findobj('Tag','imaging'),'Label','1-D F-K Migration', 'Callback',... 
%      'OPD = do_stoltmig(IPD, VS.v1d);' );
% %%%
% %%% 1-D GAZDAG Phase-shift Time Migration
%  uimenu(findobj('Tag','imaging'), ...
%      'Label','1-D Phase-shifting Migration', 'Callback',... 
%      'OPD = do_gazdagmig(IPD, VS.v1d); ' );
%%%
%%% 1-D Time-to-Depth Conversion
 uimenu(findobj('Tag','imaging'), ...
     'Label','一维时深转换','Callback',... 
     'OPD = do_ttoz(IPD, VS.v1d);' );
% %%%
% %%% -------- MIGRATION IN STRUCTURES WITH LATERAL VARIATIONS --------------
% %%%
% %%% Create or import a 2-D velocity model
% uimenu(findobj('Tag','imaging'), ...
%     'Label','Get 2-D velocity model','Separator','on',...
%     'Callback', ...
%    ['[VS.v2d, VS.zv2d, VS.dzmig] = ' ... 
%     '     get2dvelocity(IPD.ns, IPD.ntr, max(IPD.x), IPD.dx); ' ...
%     'if isempty(VS.v2d), ' ...
%     '    return; ' ...
%     'end; ' ... 
%     'showinfo(IPD); ' ]); 
% %%%
% %%% Depth Migration by Phase-shift + interpolation
%  uimenu(findobj('Tag','imaging'), ...
%      'Label','2-D Phase-shift + Interpolation Migration',...
%      'Callback',... 
%     ['if isempty(VS.v2d); ' ...
%      '    erh = warndlg(''Please provide a 2-D velocity model!'', ' ...
%      '        ''MATGPR : WARNING!''); ' ...
%      '    uiwait(erh); clear erh; ' ...
%      '    return; ' ...
%      'end; ' ...
%      'OPD = do_pspimig(IPD, VS.v2d, VS.zv2d, VS.dzmig);'] );
% %%%
% %%% Split-step Fourier Depth Migration
%  uimenu(findobj('Tag','imaging'), ...
%      'Label','2-D Split-step Fourier Migration', 'Callback',... 
%     ['if isempty(VS.v2d); ' ...
%      '    erh = warndlg(''Please provide a 2-D velocity model!'', ' ...
%      '        ''MATGPR : WARNING!''); ' ...
%      '    uiwait(erh); clear erh; ' ...
%      '    return; ' ...
%      'end; ' ...
%      'OPD = do_splitstepmig(IPD ,VS.v2d, VS.zv2d, VS.dzmig);'] );
% %%%
% %%% -------- A SIMPLE VELOCITY CALCULATOR ------------------ --------------
%  uimenu(findobj('Tag','imaging'), 'Separator', 'on', ...
%      'Label','Simple Velocity Calculator',...
%      'Callback', 'vcalc;' );

%%% =======================================================================
% %%%  2-D MODELLING
% %%% =======================================================================
% uimenu('Label',' Modelling', 'Tag', 'modeling');
% %%%
% %%% Create synthetic 2-D model
% uimenu(findobj('Tag','modeling'), 'Label', 'Build 2-D Model',...
%     'Callback', 'build2dmodel;');
% %%%
% %%% Compute a synthetic 2-D model (Split-step method of Bitri and
% %%% Grandjean, 1998)
% uimenu(findobj('Tag','modeling'),'Label','Split-step 2-D Modelling',...
%     'Separator', 'on', ...
%     'Callback', ... 
%     'OPD = do_modelling; ');
% %%%
% %%% Compute a synthetic 2-D model using the FDTD method of Inving and
% %%% Knight, 2006.
% uimenu(findobj('Tag','modeling'),'Label','FDTD 2-D Modelling',...
%     'Separator', 'on', ...
%     'Callback', ... 
%     'OPD = do_FDTD_modelling; ');

%%% =======================================================================
% %%%  3-D PRESENTATION OF SURVEY DATA
% %%% =======================================================================
% uimenu('Label',' 3-D View', 'Tag', '3Dpresent');
% %%%
% %%% Load 3-D data 
%  uimenu(findobj('Tag','3Dpresent'), 'tag', 'Load3Ddata', ...
%      'Label','Load 3-D Data',...
%      'Callback', ...
%      ['D3D = readD3D; ' ...
%       'set(findobj(''tag'',''isosurfacedisplay''),''Enable'',''on''); ' ...
%       'set(findobj(''tag'',''3Dslicedisplay''),''Enable'',''on'');' ... 
%       'set(findobj(''tag'',''Save3Ddata''),''Enable'',''on'');' ]);
% %%% Generate 3-D data volume
% uimenu(findobj('Tag','3Dpresent'), 'Label', 'Create 3-D data',...
%     'Callback', ...
%     ['Make3DData(''initialize''); ' ...
%      'waitfor(findobj(''tag'',''make3d_gui'')); ' ...
%      'if ~exist(''D3D'',''var''), ' ...
%      '    return; ' ...
%      'end; ' ...
%      'set(findobj(''tag'',''isosurfacedisplay''),''Enable'',''on''); ' ...
%      'set(findobj(''tag'',''3Dslicedisplay''),''Enable'',''on'');' ... 
%      'set(findobj(''tag'',''Save3Ddata''),''Enable'',''on'');' ]);
% %%%
% %%% Save 3-D data 
%  uimenu(findobj('Tag','3Dpresent'), 'tag', 'Save3Ddata', ...
%      'Label','Save 3-D Data',...
%      'Enable', 'off', ...
%      'Callback', 'saveD3D(D3D); ' );
% %%%
% %%% Display 3-D data as equal intensity surfaces (isosurfaces))
%  uimenu(findobj('Tag','3Dpresent'), 'tag', 'isosurfacedisplay', ...
%      'Label','Isosurface Display',...
%      'Separator', 'on', ...
%      'Enable', 'off', ...
%      'Callback', 'isosurf(D3D);');  
% %%%
% %%% Display 3-D data as slices with or without translucence
%  uimenu(findobj('Tag','3Dpresent'), 'tag', '3Dslicedisplay', ...
%      'Label','3-D Slices',...
%      'Enable', 'off', ...
%      'Callback', 'slice3d(D3D);');  

% ======================================================================
% SETUP THE MATGPR FAST WINDOW SWITCING SERVICE
% ======================================================================
% matgprwindows('setup');

% ======================================================================

%%% =======================================================================
%%% 帮助菜单
%%% =======================================================================
uimenu('Label','帮助', 'Tag', 'helpmenu');
%%%
%%% ------------ 教程视频 ----------------------------------------------
uimenu(findobj('Tag','helpmenu'), 'Label', '教程视频', 'Callback', ...
    'playVideo();');

%%%
% %%% Check for updates
% uimenu(findobj('Tag','aboutinfo'), 'Label', 'Check for Updates', ...
%     'Separator', 'on',  'CallBack', 'checkforupdates(1)');
% %%%
% %%% Contact information
% uimenu(findobj('Tag','aboutinfo'), 'Label', 'About', ...
%     'Separator', 'on',  'CallBack', ...
%     [ 'str=which(''aboutmatgpr.png''); ' ...
%       'eval(''[x,imap] = imread(str);''); ' ...
%       'clear str; ' ...
%       'if exist(''x''), ' ...  
%       '   figure(''Name'',''ABOUT MATGPR'', ''Menubar'',''none'', '...
%       '      ''NumberTitle'',''off''); ' ...
%       '   axes(''pos'',[0 0 1 1]); axis off; axis ij; ' ...
%       '   image(x); ' ...
%       '   pos = get(gcf,''position''); ' ...
%       '   set(gcf,''position'',[pos(1) 300 450 430]); ' ...
%       '   drawnow; ' ...
%       'end; ' ...
%       'clear x pos; ']);
  
return
